// services/omniService.js
import axios from "axios"

import { omnideskApiKey, omnideskEmail, omnideskUrl } from "../config.js"

// –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const headers = { "Content-Type": "application/json" }
const auth = {
  username: omnideskEmail,
  password: omnideskApiKey
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É (case) –≤ OmniDesk.
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.
 * @returns {Promise} - –ü—Ä–æ–º–∏—Å, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç API.
 */

export const postCase = async (data) => {
  const url = `${omnideskUrl}/api/cases.json`
  return axios.post(url, data, { headers, auth })
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, { user_phone: phone }).
 * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 */

export const getUser = async (params) => {
  const url = `${omnideskUrl}/api/users.json`
  const response = await axios.get(url, { headers, auth, params })
  return Object.values(response.data).map((userObj) => userObj.user)
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OmniDesk.
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */

export const createUser = async (data) => {
  try {
    const url = `${omnideskUrl}/api/users.json`
    const response = await axios.post(url, data, { headers, auth })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!response.data || !response.data.user || !response.data.user.user_id) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OmniDesk")
    }

    return response.data.user // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
    throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.
 * @param {Array} users - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 */

export const deleteUsers = async (users) => {
  let deletedCount = 0

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  users = users.filter((user) => user && user.user_id)

  for (const user of users) {
    try {
      const url = `${omnideskUrl}/api/users/${user.user_id}.json`
      const response = await axios.delete(url, { headers, auth })
      console.log(
        `‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: ${user.user_id}):`,
        response.status
      )
      deletedCount++
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: ${user.user_id}):`,
        error.message
      )
      if (error.response) {
        console.error(
          "üìå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
          JSON.stringify(error.response.data, null, 2)
        )
        console.error("üìå HTTP —Å—Ç–∞—Ç—É—Å:", error.response.status)
      }
    }
  }

  return deletedCount
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π.
 * @param {string|number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
 */

export const deleteOldCases = async (userId) => {
  try {
    const response = await axios.get(`${omnideskUrl}/api/cases.json`, {
      params: { user_id: userId },
      headers,
      auth
    })

    const cases = response.data.cases || []

    if (cases.length <= 1) {
      console.log("‚úÖ –ó–∞—è–≤–æ–∫ –º–µ–Ω—å—à–µ –¥–≤—É—Ö, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º.")
      return 0
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    cases.sort((a, b) => new Date(a.created_at) - new Date(b.created_at))

    let deletedCount = 0
    for (let i = 0; i < cases.length - 1; i++) {
      await axios.delete(`${omnideskUrl}/api/cases/${cases[i].case_id}.json`, {
        headers,
        auth
      })
      deletedCount++
    }

    return deletedCount
  } catch (error) {
    throw new Error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: ${error.message}`)
  }
}
