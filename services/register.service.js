import { bitrixUrl } from "../config.js"
import { cleanOmniNotes } from "../utils/cleanOmniNotes.js"
import { extractTarifText } from "../utils/extractTarifText.js"
import { createLogger } from "../utils/logger.js"
import { sendWa } from "../utils/sendWa.js"

import { createUser, deleteUsers, getUser, postCase } from "./omni.service.js"

const logger = createLogger("REGISTER_SERVICE")

export const processRegistration = async (req, res, isTestMode) => {
  try {
    logger.info("üîπ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    // –í—ã–≤–æ–¥–∏–º URL –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    logger.debug("üîπ –ò—Å—Ö–æ–¥–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞:", req.originalUrl)

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
    let dataStr = decodeURIComponent(req.originalUrl)

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /register –∏–ª–∏ /register-test
    dataStr = dataStr.replace(/^\/(register-test|register)\|?/, "").trim()

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.debug("üîπ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", dataStr)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å "|", —É–¥–∞–ª—è–µ–º
    if (dataStr.startsWith("|")) {
      dataStr = dataStr.slice(1)
      logger.debug("üîπ –£–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π '|', –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", dataStr)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞
    if (!dataStr) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
      return res.status(400).send("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ "|"
    const fields = dataStr.split("|")

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    logger.debug("üîπ –†–∞–∑–±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (fields):", fields)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
    if (fields.length !== 15) {
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fields.length} –≤–º–µ—Å—Ç–æ 15`
      )
      return res
        .status(400)
        .send(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fields.length}`)
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
    const [
      tid,
      surname,
      firstName,
      email,
      company,
      contname,
      phone,
      inn,
      contmail,
      tg,
      cat,
      role,
      tarif,
      comment,
      gs1
    ] = fields

    logger.info("‚úÖ –ü–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã")
    logger.debug("üîπ tid:", tid)
    logger.debug("üîπ surname:", surname)
    logger.debug("üîπ firstName:", firstName)
    logger.debug("üîπ email:", email)
    logger.debug("üîπ company:", company)
    logger.debug("üîπ phone:", phone)

    const dealUrl = `${bitrixUrl}/crm/deal/details/${tid}/`
    let tarifText = cleanOmniNotes(extractTarifText(tarif))

    // üîç **–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**
    logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ email...")
    let existingUsers = []

    try {
      existingUsers = await getUser({ user_phone: phone, user_email: contmail })

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      existingUsers = existingUsers.filter((user) => user && user.user_id)

      logger.debug("üìå –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ OmniDesk:", existingUsers)
    } catch (error) {
      logger.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.message
      )
    }

    // ‚úÖ **–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ**
    if (existingUsers.length > 1) {
      logger.warn(
        `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${existingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö.`
      )
      try {
        const deletedCount = await deleteUsers(existingUsers)
        logger.info(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${deletedCount}`)
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message)
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (existingUsers.length === 1) {
      logger.warn(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${existingUsers[0].user_id}), —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`
      )
      return res.sendStatus(200)
    }

    // üì≤ **–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp**
    let waStatus = "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ùå"

    if (!isTestMode) {
      logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É WhatsApp...")
      try {
        waStatus = await sendWa(phone)
        logger.info("üìå –°—Ç–∞—Ç—É—Å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", waStatus)
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp:", error.message)
      }
    } else {
      logger.info("üõë –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, WhatsApp –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
    }

    logger.info("üìå –°—Ç–∞—Ç—É—Å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", waStatus)

    // üìù **–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É**
    const caseData = {
      case: {
        user_email: email,
        cc_emails: ["atsatryan@getmark.ru"],
        status: "open",
        content_type: "html",
        user_full_name: `${surname} ${firstName}`,
        subject: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. ${company} - ${Date.now()}`,
        content: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${company}
 –ö–æ–Ω—Ç–∞–∫—Ç: ${phone} ${contname}
 –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat} ${role}
 –¢–∞—Ä–∏—Ñ: ${tarifText}
 –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${waStatus}
 –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${dealUrl}
 ${gs1 === "–î–∞" ? "üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–°1!" : ""}
 ${comment ? "‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + comment : ""}`
      }
    }

    logger.debug(
      "üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ OmniDesk:",
      JSON.stringify(caseData, null, 2)
    )

    try {
      const { status, data } = await postCase(caseData)
      logger.info(`‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ OmniDesk. –°—Ç–∞—Ç—É—Å: ${status}`)
      logger.debug("üìå –û—Ç–≤–µ—Ç OmniDesk:", JSON.stringify(data, null, 2))
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –≤ OmniDesk:", error.message)
      if (error.response) {
        logger.error(
          "üìå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
          JSON.stringify(error.response.data, null, 2)
        )
        logger.error("üìå HTTP —Å—Ç–∞—Ç—É—Å:", error.response.status)
      }
    }

    // üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    logger.info("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    const userData = {
      user: {
        user_full_name: contname,
        company_name: company,
        company_position: inn,
        user_phone: phone,
        user_email: contmail,
        user_telegram: tg.replace("@", ""),
        user_note: tarifText
      }
    }

    try {
      const createdUser = await createUser(userData)

      if (!createdUser || !createdUser.user_id) {
        throw new Error(
          "OmniDesk –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
      }

      logger.info(`‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ID ${createdUser.user_id}`)
      res.sendStatus(200)
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
      if (error.response) {
        logger.error(
          "üìå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
          JSON.stringify(error.response.data, null, 2)
        )
        logger.error("üìå HTTP —Å—Ç–∞—Ç—É—Å:", error.response.status)
        logger.error(
          "üìå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:",
          JSON.stringify(error.response.headers, null, 2)
        )
      }
      res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    }
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message)
    res.status(500).send("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
  }
}
