import { parseRequest } from "../utils/parseRequest.js"
import { sendWa } from "../utils/sendWa.js"

import {
  createCase,
  createUser,
  deleteUser,
  getUser,
  unlinkAllLinkedUsers
} from "./omni.service.js"

export const processRegistration = async (req, res, isTestMode) => {
  try {
    const data = parseRequest(req.path)

    //–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let existingUsers = []

    try {
      existingUsers = await getUser({
        user_phone: data.phone,
        user_email: data.contmail
      })
    } catch (error) {
      console.error(`–æ—à–∏–±–∫–∞: ${error}`)
      throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${error.message}`)
    }

    //–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (existingUsers.length > 0) {
      for await (const user of existingUsers) {
        try {
          await unlinkAllLinkedUsers(user?.user_id)
          await deleteUser(user?.user_id)
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`)
        }
      }
    }

    //–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WatsApp
    let waStatus = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"

    if (!isTestMode) {
      console.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ WatsApp...")
      try {
        waStatus = await sendWa(data.phone)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp:", error.message)
      }
    } else {
      console.info("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, WhatsApp –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è!")
    }

    //–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const caseData = {
      case: {
        user_email: data.email,
        status: "open",
        content_type: "html",
        user_full_name: `${data.surname} ${data.firstName}`,
        subject: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. ${data.company} - ${Date.now()}`,
        content: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${data.company}
–ö–æ–Ω—Ç–∞–∫—Ç: ${data.phone} ${data.contname}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data.cat} ${data.role}
–¢–∞—Ä–∏—Ñ: ${data.cleanTarif}
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${waStatus}
–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${data.dealUrl}
${data.gs1 === "–î–∞" ? "üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–°1!" : ""}
${data.comment ? "‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + data.comment : ""}`
      }
    }

    //–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    console.log("–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞:", JSON.stringify(caseData, null, 2))

    //–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ OmniDesk
    try {
      const newCase = await createCase(caseData)
      console.log("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", newCase)
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error.message)
    }

    //–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      user: {
        user_full_name: data.contname,
        company_name: data.company,
        company_position: data.inn,
        user_phone: data.phone,
        user_email: data.contmail,
        user_telegram: data.tg.replace("@", ""),
        user_note: data.cleanNotes
      }
    }

    //–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", JSON.stringify(userData, null, 2))

    try {
      const newUser = await createUser(userData)
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID ${newUser.user_id}`)
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
    }

    res.sendStatus(200)
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞: ${error.message}`)
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", details: error.message })
  }
}
