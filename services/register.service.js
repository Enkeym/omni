import { parseRequest } from "../utils/parseRequest.js"
import { sendWa } from "../utils/sendWa.js"

import {
  createCase,
  createUser,
  editUser,
  getUser,
  unlinkAllLinkedUsers
} from "./omni.service.js"

export const processRegistration = async (req, res, isTestMode) => {
  try {
    const data = parseRequest(req.path)

    //–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let existingUsers = []
    existingUsers = existingUsers.filter((usr) => usr && usr.user_id)

    try {
      existingUsers = await getUser({
        user_phone: data.phone,
        user_email: data.contmail
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${error.message}`)
    }

    let mainUser = null
    if (existingUsers.length > 0) {
      mainUser = existingUsers[0]
      const duplicates = existingUsers.slice(1)

      if (duplicates.length > 0) {
        for await (const dup of duplicates) {
          if (!dup?.user_id) {
            console.warn("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –±–µ–∑ user_id:", dup)
            continue
          }
          try {
            console.log(`–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç: user_id=${dup.user_id}`)
            await unlinkAllLinkedUsers(dup.user_id)
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞:", err.message)
          }
        }
      }
    }

    const userData = {
      user: {
        user_full_name: data.contname,
        company_name: data.company,
        company_position: data.inn,
        user_phone: data.phone,
        user_email: data.contmail,
        user_telegram: data.tg.replace("@", ""),
        user_note: data.cleanNotes
      }
    }

    try {
      if (!mainUser) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...")
        mainUser = await createUser(userData)
        console.log("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", mainUser.user_id)
      } else {
        console.log(
          `–û–±–Ω–æ–≤–ª—è–µ–º ¬´–≥–ª–∞–≤–Ω–æ–≥–æ¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=${mainUser.user_id}...`
        )
        mainUser = await editUser(mainUser.user_id, userData)
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:", mainUser.user_id)
      }
    } catch (err) {
      if (err.message.includes("email_already_exists")) {
        console.error(
          "–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç email —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ..."
        )

        let existingEmailUser = []
        try {
          existingEmailUser = await getUser({ user_email: data.contmail })
        } catch (findError) {
          console.error(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:",
            findError.message
          )
        }

        if (existingEmailUser.length) {
          console.log(
            "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:",
            existingEmailUser[0].user_id
          )
          mainUser = existingEmailUser[0]
        } else {
          console.warn(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ API."
          )
        }
      } else {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
          err.message
        )
      }
    }

    let waStatus = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"
    if (!isTestMode) {
      console.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ WhatsApp...")
      try {
        waStatus = await sendWa(data.phone)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp:", error.message)
      }
    }

    const caseData = {
      case: {
        user_email: data.email,
        status: "open",
        content_type: "html",
        user_full_name: `${data.surname} ${data.firstName}`,
        subject: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. ${data.company} - ${Date.now()}`,
        content: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${data.company}
–ö–æ–Ω—Ç–∞–∫—Ç: ${data.phone} ${data.contname}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data.cat} ${data.role}
–¢–∞—Ä–∏—Ñ: ${data.cleanTarif}
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${waStatus}
–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${data.dealUrl}
${data.gs1 === "–î–∞" ? "üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–°1!" : ""}
${data.comment ? "‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + data.comment : ""}`
      }
    }

    console.log("–°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É...", JSON.stringify(caseData, null, 2))
    try {
      const newCase = await createCase(caseData)
      console.log("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", newCase)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err.message)
    }

    res.sendStatus(200)
  } catch (error) {
    if (
      error.message.startsWith("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω") ||
      error.message.startsWith("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail") ||
      error.message.startsWith("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤") ||
      error.message.includes("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    ) {
      console.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", error.message)
      return res.status(400).json({ error: error.message })
    }
    console.error("–û—à–∏–±–∫–∞:", error.message)
    return res.status(500).json({
      error: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
      details: error.message
    })
  }
}
