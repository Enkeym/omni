import { createLogger } from "../utils/logger.js"

const logger = createLogger("PAYMENT")

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
 */
export const payment = async (req, res) => {
  try {
    logger.info("üîπ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ")

    let dataStr = decodeURIComponent(req.originalUrl)
      .replace(/^\/payment/, "")
      .trim()

    if (dataStr.startsWith("|")) {
      dataStr = dataStr.slice(1)
    }
    if (!dataStr) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
      return res.status(400).send("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    }

    const fields = dataStr.split("|")

    if (fields.length < 2) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fields.length}`)
      return res.status(400).send("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    }

    const [transactionId, userId, amount] = fields

    logger.info(
      `‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${transactionId}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –°—É–º–º–∞ ${amount}`
    )

    res.status(200).send(`‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${transactionId}`)
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:", error.message)
    res.status(500).send("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
  }
}
