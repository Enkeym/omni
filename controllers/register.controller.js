// controllers/register.controller.js
import { bitrixUrl } from "../config.js"
import { createUser, getUser, postCase } from "../services/omniService.js"
import { cleanOmniNotes } from "../utils/cleanOmniNotes.js"
import { extractTarifText } from "../utils/extractTarifText.js"
import { createLogger } from "../utils/logger.js"
import { sendWa } from "../utils/sendWa.js"

const logger = createLogger("REGISTER")

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
 * –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –≤ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–µ data
 * –∏–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /register|ID|...).
 */
export const register = async (req, res) => {
  try {
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    // 1. –°—Ä–∞–∑—É –ò–ì–ù–û–†–ò–†–£–ï–ú req.body, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –ª–µ–∂–∞—Ç document_id=...
    // let dataStr = req.body || req.query.data;
    let dataStr = ""

    // 2. –í—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º URL:
    //    req.originalUrl –º–æ–∂–µ—Ç –±—ã—Ç—å "/register|D_52230|–ù–∞–∑–≤–∞–Ω–∏–µ|..."
    dataStr = decodeURIComponent(req.originalUrl).replace(/^\/register/, "")
    if (dataStr.startsWith("|")) {
      dataStr = dataStr.slice(1)
    }
    dataStr = dataStr.trim()

    // 3. –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç–æ ‚Äî –æ—à–∏–±–∫—É
    if (!dataStr) {
      return res.status(400).send("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    }

    // 4. –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ "|"
    const fields = dataStr.split("|")
    if (fields.length !== 15) {
      return res
        .status(400)
        .send(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fields.length}`)
    }

    // 5. –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è (15 –ø–æ–ª–µ–π)
    const [
      tid, // {{ID —ç–ª–µ–º–µ–Ω—Ç–∞ CRM}}
      surname, // {{–ö–æ–Ω—Ç–∞–∫—Ç: –§–∞–º–∏–ª–∏—è}}
      firstName, // {{–ö–æ–Ω—Ç–∞–∫—Ç: –ò–º—è}}
      email, // {{–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (e-mail)}}
      company, // {{–ö–æ–º–ø–∞–Ω–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏}}
      contname, // {{–ö–æ–Ω—Ç–∞–∫—Ç: –ò–º—è}} - –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –ø–æ–ª–µ –∏–ª–∏ "–¥—Ä—É–≥–æ–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ"
      phone, // {{–ö–æ–Ω—Ç–∞–∫—Ç: –†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω}}
      inn, // {{–ò–ù–ù}}
      contmail, // {{–≠–ª.–ø–æ—á—Ç–∞}}
      tg, // {{–¢–µ–ª–µ–≥—Ä–∞–º}}
      cat, // {{–ö–∞—Ç–µ–≥–æ—Ä–∏—è}}
      role, // {{–†–æ–ª—å (–≤–∏–¥ —Ç–æ—Ä–≥–æ–≤–ª–∏) (—Ç–µ–∫—Å—Ç)}}
      tarif, // [td]{{–¢–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–µ–∫—Å—Ç)}}[/td]
      comment, // {{–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–µ—Ö. –æ—Ç–¥–µ–ª–∞}}
      gs1 // {{–ì–°1 > printable}}
    ] = fields
    logger.info("–ü–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã")

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞—è–≤–∫—É –≤ Bitrix24
    const dealUrl = `${bitrixUrl}/crm/deal/details/${tid}/`
    logger.debug("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É:", dealUrl)

    // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    let tarifText = extractTarifText(tarif)
    tarifText = cleanOmniNotes(tarifText)
    logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ:", tarifText)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π, –∏–Ω–∞—á–µ WhatsApp —É–ø–∞–¥—ë—Ç
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", phone)
    const waStatus = phone ? await sendWa(phone) : "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ùå"
    logger.info("–°—Ç–∞—Ç—É—Å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", waStatus)

    // MOK
    //const waStatus = "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ùå"

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è OmniDesk (–ø—Ä–∏–º–µ—Ä)
    const caseData = {
      case: {
        user_email: email,
        cc_emails: ["atsatryan@getmark.ru"],
        status: "open",
        content_type: "html",
        user_full_name: `${surname} ${firstName}`,
        subject: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. ${company} - ${Date.now()}`,
        content: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${company}
–ö–æ–Ω—Ç–∞–∫—Ç: ${phone} ${contname}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat} ${role}
–¢–∞—Ä–∏—Ñ: ${tarifText}
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${waStatus}
–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${dealUrl}
${gs1 === "–î–∞" ? "üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–°1!" : ""}
${comment ? "‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + comment : ""}
`
      }
    }
    logger.debug(
      "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ OmniDesk:",
      JSON.stringify(caseData, null, 2)
    )
    const { status } = await postCase(caseData)
    logger.info("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", status)

    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:", phone)
    let existingUser
    try {
      const { data: userResponse } = await getUser({
        user_phone: phone,
        user_email: contmail
      })
      logger.debug("–û—Ç–≤–µ—Ç OmniDesk –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userResponse)

      if (userResponse && Object.keys(userResponse).length > 0) {
        existingUser = userResponse[0]?.user || null
        logger.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", existingUser?.user_id)
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
    }

    if (existingUser) {
      logger.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
      return res.sendStatus(200)
    }

    const uniqueEmail = `user+${Date.now()}@getmark.ru`
    const userData = {
      user: {
        user_full_name: contname,
        company_name: company,
        company_position: inn,
        user_phone: phone,
        user_email: uniqueEmail,
        user_telegram: tg.replace("@", ""),
        user_note: tarifText
      }
    }

    try {
      const { data: createData } = await createUser(userData)
      logger.info("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", createData)
      res.sendStatus(200)
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
      if (error.response) {
        logger.error(
          "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
          JSON.stringify(error.response.data, null, 2)
        )
        logger.error("HTTP –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response.status)
        logger.error(
          "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:",
          JSON.stringify(error.response.headers, null, 2)
        )
      }
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message)
    res.status(500).send("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
  }
}
