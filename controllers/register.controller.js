import { bitrixUrl } from "../config.js"
import {
  createUser,
  deleteOldCases,
  getUser,
  postCase
} from "../services/omniService.js"
import { cleanOmniNotes } from "../utils/cleanOmniNotes.js"
import { extractTarifText } from "../utils/extractTarifText.js"
import { createLogger } from "../utils/logger.js"
import { sendWa } from "../utils/sendWa.js"

const logger = createLogger("REGISTER")

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ.
 * –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –≤ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–µ data
 * –∏–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /register|ID|...).
 */
export const register = async (req, res) => {
  try {
    logger.info("üîπ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    // –í—ã–≤–æ–¥–∏–º URL –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    logger.debug("üîπ –ò—Å—Ö–æ–¥–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞:", req.originalUrl)

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –∏ —É–¥–∞–ª—è–µ–º /register
    let dataStr = decodeURIComponent(req.originalUrl)
      .replace(/^\/register/, "")
      .trim()

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.debug("üîπ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", dataStr)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å "|", —É–¥–∞–ª—è–µ–º
    if (dataStr.startsWith("|")) {
      dataStr = dataStr.slice(1)
      logger.debug("üîπ –£–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π '|', –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", dataStr)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞
    if (!dataStr) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
      return res.status(400).send("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ "|"
    const fields = dataStr.split("|")

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    logger.debug("üîπ –†–∞–∑–±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (fields):", fields)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
    if (fields.length !== 15) {
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fields.length} –≤–º–µ—Å—Ç–æ 15`
      )
      return res
        .status(400)
        .send(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fields.length}`)
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
    const [
      tid,
      surname,
      firstName,
      email,
      company,
      contname,
      phone,
      inn,
      contmail,
      tg,
      cat,
      role,
      tarif,
      comment,
      gs1
    ] = fields

    logger.info("‚úÖ –ü–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã")
    logger.debug("üîπ tid:", tid)
    logger.debug("üîπ surname:", surname)
    logger.debug("üîπ firstName:", firstName)
    logger.debug("üîπ email:", email)
    logger.debug("üîπ company:", company)
    logger.debug("üîπ phone:", phone)

    logger.info("–ü–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã")

    const dealUrl = `${bitrixUrl}/crm/deal/details/${tid}/`
    let tarifText = cleanOmniNotes(extractTarifText(tarif))

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:", phone)
    let existingUser = null

    try {
      const { data: userResponse } = await getUser({
        user_phone: phone,
        user_email: contmail
      })
      logger.debug("–û—Ç–≤–µ—Ç OmniDesk –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userResponse)

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email –∏ –Ω–æ–º–µ—Ä—É
      const matchedUser = Object.values(userResponse).find((userObj) => {
        const user = userObj.user
        return (
          user.user_phone === phone ||
          user.wa_id === phone ||
          user.user_email === contmail
        )
      })

      if (matchedUser) {
        existingUser = matchedUser.user
        logger.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, ID:", existingUser?.user_id)
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    if (existingUser) {
      logger.warn(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π..."
      )
      try {
        const deletedCount = await deleteOldCases(existingUser.user_id)
        logger.info(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫: ${deletedCount}`)
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫:", error.message)
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", phone)
    const waStatus = phone ? await sendWa(phone) : "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ùå"
    logger.info("–°—Ç–∞—Ç—É—Å WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", waStatus)

    // –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    const caseData = {
      case: {
        user_email: email,
        cc_emails: ["atsatryan@getmark.ru"],
        status: "open",
        content_type: "html",
        user_full_name: `${surname} ${firstName}`,
        subject: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. ${company} - ${Date.now()}`,
        content: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${company}
–ö–æ–Ω—Ç–∞–∫—Ç: ${phone} ${contname}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat} ${role}
–¢–∞—Ä–∏—Ñ: ${tarifText}
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${waStatus}
–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: ${dealUrl}
${gs1 === "–î–∞" ? "üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–°1!" : ""}
${comment ? "‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + comment : ""}`
      }
    }

    logger.debug(
      "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ OmniDesk:",
      JSON.stringify(caseData, null, 2)
    )
    try {
      const { status, data } = await postCase(caseData)
      logger.info(`–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ OmniDesk. –°—Ç–∞—Ç—É—Å: ${status}`)
      logger.debug("–û—Ç–≤–µ—Ç OmniDesk:", JSON.stringify(data, null, 2))
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –≤ OmniDesk:", error.message)
      if (error.response) {
        logger.error(
          "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
          JSON.stringify(error.response.data, null, 2)
        )
        logger.error("HTTP —Å—Ç–∞—Ç—É—Å:", error.response.status)
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å–æ–∑–¥–∞–ª–∏, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    if (existingUser) {
      return res.sendStatus(200)
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    const userData = {
      user: {
        user_full_name: contname,
        company_name: company,
        company_position: inn,
        user_phone: phone,
        user_email: contmail,
        user_telegram: tg.replace("@", ""),
        user_note: tarifText
      }
    }

    try {
      const { data: createData } = await createUser(userData)
      logger.info("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", createData)
      res.sendStatus(200)
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message)
      if (error.response) {
        logger.error(
          "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:",
          JSON.stringify(error.response.data, null, 2)
        )
        logger.error("HTTP –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response.status)
        logger.error(
          "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:",
          JSON.stringify(error.response.headers, null, 2)
        )
      }
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message)
    res.status(500).send("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
  }
}
